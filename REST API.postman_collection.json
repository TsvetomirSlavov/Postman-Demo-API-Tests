{
	"variables": [],
	"info": {
		"name": "REST API",
		"_postman_id": "ee94e82b-c612-b9e6-6249-be7c79fa8353",
		"description": "<p>Poject paramnters</p>\n<ul>\n<li>OTDS_URL - host address including https, but not the port.</li>\n<li>OTDS_PORT - the port.</li>\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\n<li>User - Username to validate against OTDS</li>\n<li>Password - password for OTDS</li>\n<li>MGW_URL - host address including https, but not the port.</li>\n<li>MGW_PORT</li>\n<li>TENANT_NAME</li>\n<li>DOMAIN</li>\n</ul>\n\nNote: If DNS names works then update the SGW_HOST in the CRUD requests with the host URL including port from the MGW calls response.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Documents",
			"description": "",
			"item": [
				{
					"name": "getOTDSTicket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Ticket is not empty\"] = jsonData.ticket !== \"\";",
									"postman.setEnvironmentVariable(\"OTDSTicket\", jsonData.ticket);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{OTDSTICKETURL}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
						},
						"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
					},
					"response": []
				},
				{
					"name": "getSGW_FROM_MGW",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"SGW_HOST\", jsonData.data[0].url);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{MGWHOST}}:{{MGWPORT}}/management/rest/v1/servicegateways?where_tenant={{TENANTNAME}}&where_applicationdomain={{DOMAINNAME}}&where_primary_access_node=true",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to recieve an SGW from MGW.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>MGW_URL - host address including https, but not the port.</li>\r\n<li>MGW_PORT - the port.</li>\r\n</ul>\r\n\r\n<h6>Query paramete(s)</h6>\r\n<ul>\r\n<li>TENANT_NAME - the tenant name e.g. \"strs\"</li>\r\n<li>DOMAIN - the domain name \"test\"</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{SGW_HOST}} is set with the host value from <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Example response:\r\n<code>\r\n{\r\n  \"data\": [\r\n    {\r\n      \"host\": \"WIN-N35EVTP4FCK\",\r\n      \"name\": \"demoSGW\",\r\n      \"path\": \"\",\r\n      \"port\": \"2719\",\r\n      \"secure\": \"false\",\r\n      \"url\": \"http://WIN-N35EVTP4FCK:2719\"\r\n    }\r\n  ],\r\n  \"status\": \"success\"\r\n}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Create Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var documents = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"documentid\", documents.data.id);",
									"tests[\"Resource created test\"] = documents.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
									"tests[\"status of the message has theme\"] = responseBody.has(\"theme\");",
									"tests[\"body has revision\"] = responseBody.has(\"revision\");",
									"tests[\"Revision id is not empty\"] = documents.revision !== \"\";",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"theme\":{\r\n        \"id\":\"Y3hyOi8_aWQ9M2MwMjlkYjUtMTc4ZS1iOTRlLTgyZjctMTJkMzIzNzg3NDZmO3Y9MTt0PTU2MzZhYWNlLWJmNWYtYTExZi04ZTZjLTMzZTRmODZjMjQ0Zg==\"\r\n    },\r\n    \"content\":{\r\n        \"data\":\"\",\r\n        \"contentType\":\"text/xml\"\r\n    }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Create Document with no theme ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var documents = JSON.parse(responseBody);",
									"tests[\"Body has status error\"] = responseBody.has(\"error\");",
									"tests[\"Failed to create document\"] = documents.message.has(\"Failed to create document\");",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"theme\":{\r\n        \"id\":\"TZjLTMzZTRmODZjMjQ0Zg==\"\r\n    },\r\n    \"content\":{\r\n        \"data\":\"\",\r\n        \"contentType\":\"text/xml\"\r\n    }\r\n}\r\n"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has data\"] = responseBody.has(\"theme\");",
									"tests[\"Body has structure\"] = responseBody.has(\"exposedStories\");",
									"tests[\"Body has preview formats\"] = responseBody.has(\"previewFormats\");",
									"tests[\"Body has preview createdBy\"] = responseBody.has(\"createdBy\");",
									"tests[\"Body has preview previewFormats\"] = responseBody.has(\"previewFormats\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/38CC60AE-95BC-48D1-BF5F-4321CCB9BA82",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Put Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has data\"] = responseBody.has(\"theme\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/{{documentid}}?where_revision=2",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n  \"data\": {\n    \"id\": \"1058D373-CC45-7D0D-B630-D90D87A6B59C:50A330A4-4E00-254B-B533-02D94DEF27F1\",\n    \"theme\": {\n      \"type\": \"38CC60AE-95BC-48D1-BF5F-4321CCB9BA82\",\n      \"structure\": {\n        \"name\": \"ThemeTest\",\n        \"template\": {\n          \"id\": \"Y3hyOi8_aWQ9Yjk4NjNiNTctZTA2Yi1hMTQyLThkNzctNTUyYjMyODYwNTFkO3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh\",\n          \"version\": \"1\",\n          \"name\": \"InteractiveStatement\"\n        },\n        \"sections\": [\n          {\n            \"id\": \"53991a8b-961261c4-f8ab27a8-d70478c4\",\n            \"name\": \"Hello section\",\n            \"visible\": false,\n            \"items\": [],\n            \"sdpermissions\": [\n              \"read\",\n              \"write\",\n              \"execute\",\n              \"delete\"\n            ]\n          },\n          {\n            \"id\": \"f5e02ba8-8b70b851-3cb38ec0-cfd0ded9\",\n            \"name\": \"Information\",\n            \"visible\": false,\n            \"items\": [],\n            \"sdpermissions\": [\n              \"read\",\n              \"write\",\n              \"execute\",\n              \"delete\"\n            ]\n          }\n        ],\n        \"channels\": []\n      },\n      \"rule\": null,\n      \"simulations\": null,\n      \"originLogicId\": null,\n      \"previewFormats\": [\n        \"WEB\",\n        \"PRINT\",\n        \"PRINT_PDF\",\n        \"IMAGE\"\n      ],\n      \"creationTime\": null,\n      \"workingCopy\": false,\n      \"projectVersion\": 0,\n      \"exposedStories\": [\n        {\n          \"type\": \"story\",\n          \"id\": \"OWYzNTliOWItYmVkYzcwODEtN2QxMGM5ZDctZDEzNjg3NGQ=\",\n          \"name\": \"Hello default\",\n          \"description\": \"\",\n          \"uri\": null,\n          \"rule\": null,\n          \"parentSectionId\": null\n        }\n      ],\n      \"templateVersion\": null,\n      \"templateLogicId\": null,\n      \"messageComplexType\": \"1058D373-CC45-7D0D-B630-D90D87A6B59C\",\n      \"createdBy\": null,\n      \"applicationDomainIdList\": [],\n      \"name\": \"ThemeTest\",\n      \"id\": \"Y3hyOi8_aWQ9MTNlMWI1NzktYjg4OS0zNzRkLTgxNTAtMzE4NDIxOTlkYjY0O3Y9MTt0PTU2MzZhYWNlLWJmNWYtYTExZi04ZTZjLTMzZTRmODZjMjQ0Zg==\",\n      \"owner\": null,\n      \"version\": null,\n      \"description\": \"\",\n      \"logicId\": null,\n      \"revision\": -1,\n      \"lockedBy\": null,\n      \"lastModificationTime\": null,\n      \"versionComment\": null,\n      \"sdpermissions\": null,\n      \"lastModificationDate\": null\n    },\n    \"service\": null,\n    \"revision\": 2,\n    \"content\": null,\n    \"state\": null\n  }\n  }"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Get Document with wrong document ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is error\"] = responseCode.code === 500;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"error\";",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/1234565",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Get  Document Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"resourceid\", jsonData.data[0].id);",
									"tests[\"Body contains status success\"] = jsonData.status === \"success\";",
									"tests[\"Body data not empty\"] = jsonData.data !== \"\";",
									"tests[\"Body contains data\"] = responseBody.has(\"status\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/{{documentid}}/resources?guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Get  Document Resource ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"error\";",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/{{documentid}}/resources/Y3hyOi8_aWQ9ZmExNjEyZTgtMmQ2Yy04YTQ0LWI5N2UtNjRmMTg3MmE0ZDE1O3Y9MTt0PTk3MzhkNzM4LTljOWUtNmZmMS05MWNiLTMzZGRiOTAwMTFhYw==/?guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Create Document with no content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var documents = JSON.parse(responseBody);",
									"tests[\"Body has status error\"] = responseBody.has(\"error\");",
									"tests[\"Failed to create document\"] = documents.message.has(\"Failed to create document\");",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"theme\":{\r\n        \"id\":\"TZjLTMzZTRmODZjMjQ0Zg==\"\r\n    },\r\n    \"content\":{\r\n        \"data\":\"\",\r\n        \"contentType\":\"text/xml\"\r\n    }\r\n}\r\n"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Preview",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"response Body has data\"] = responseBody.has(\"pages\");",
									"tests[\"response Body has assets\"] = responseBody.has(\"assets\");",
									"tests[\"response Body has mimetype\"] = responseBody.has(\"mimeType\");",
									"tests[\"response Body has previewFormats\"] = responseBody.has(\"previewFormats\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/{{documentid}}/previews",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"response Body has data\"] = responseBody.has(\"pages\");",
									"tests[\"response Body has assets\"] = responseBody.has(\"assets\");",
									"tests[\"response Body has mimetype\"] = responseBody.has(\"mimeType\");",
									"tests[\"response Body has previewFormats\"] = responseBody.has(\"previewFormats\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents/{{documentid}}/previews",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Queue",
			"description": "",
			"item": [
				{
					"name": "getOTDSTicket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Ticket is not empty\"] = jsonData.ticket !== \"\";",
									"postman.setEnvironmentVariable(\"OTDSTicket\", jsonData.ticket);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{OTDSTICKETURL}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
						},
						"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
					},
					"response": []
				},
				{
					"name": "getSGW_FROM_MGW",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"SGW_HOST\", jsonData.data[0].url);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{MGWHOST}}:{{MGWPORT}}/management/rest/v1/servicegateways?where_tenant={{TENANTNAME}}&where_applicationdomain={{DOMAINNAME}}&where_primary_access_node=true",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to recieve an SGW from MGW.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>MGW_URL - host address including https, but not the port.</li>\r\n<li>MGW_PORT - the port.</li>\r\n</ul>\r\n\r\n<h6>Query paramete(s)</h6>\r\n<ul>\r\n<li>TENANT_NAME - the tenant name e.g. \"strs\"</li>\r\n<li>DOMAIN - the domain name \"test\"</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{SGW_HOST}} is set with the host value from <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Example response:\r\n<code>\r\n{\r\n  \"data\": [\r\n    {\r\n      \"host\": \"WIN-N35EVTP4FCK\",\r\n      \"name\": \"demoSGW\",\r\n      \"path\": \"\",\r\n      \"port\": \"2719\",\r\n      \"secure\": \"false\",\r\n      \"url\": \"http://WIN-N35EVTP4FCK:2719\"\r\n    }\r\n  ],\r\n  \"status\": \"success\"\r\n}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Create Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var documents = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"documentid\", documents.data.id);",
									"tests[\"Resource created test\"] = documents.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
									"tests[\"status of the message has theme\"] = responseBody.has(\"theme\");",
									"tests[\"body has revision\"] = responseBody.has(\"revision\");",
									"tests[\"Revision id is not empty\"] = documents.revision !== \"\";",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"theme\":{\r\n        \"id\":\"Y3hyOi8_aWQ9NGFjMThmYzAtY2EyMC05OTQ4LTkwZjktYjliZmRlODYzNTcyO3Y9MTt0PTU2MzZhYWNlLWJmNWYtYTExZi04ZTZjLTMzZTRmODZjMjQ0Zg==\"\r\n    },\r\n    \"content\":{\r\n        \"data\":\"\",\r\n        \"contentType\":\"text/xml\"\r\n    }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": " Input Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has input queue as typeid\"] = responseBody.has(\"inputqueueobject\");",
									"tests[\"Body has default input queue as complextype\"] = responseBody.has(\"inputqueue\");",
									"tests[\"Complex type id is  not null \"] = jsonData.complextypeid !== null",
									"tests[\"Tracker Id not null\"] = jsonData.trackerid !== null",
									"tests[\"Creation time not null \"] = jsonData.creationtime !== null",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents?where_typeid=inputqueueobject&fields=servicecallflag,applicationlockid,nextaccesstime,processingsequencenumber,connectorname,externalid,remainingattempts,storagecomponenttypeid,processingstate,processingattemptid,referencecount,trackerid,sizeinbytes,tenantid,typeid,id,applicationid,contentflags,queueid,complextypeid,expiringtime,parentattemptid,priority,sequencenumber,applicationdomainid,revision,parentjobid,parentcomplextypeid,originaltrackerid,creationtime&guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Output Queue ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has output queue as type id\"] = responseBody.has(\"outputqueueobject\");",
									"tests[\"Body has default output queue as complex type\"] = responseBody.has(\"defaultoutputqueue\");",
									"tests[\"Complex type id is  not null \"] = jsonData.complextypeid !== null",
									"tests[\"Tracker Id not null\"] = jsonData.trackerid !== null",
									"tests[\"Creation time not null \"] = jsonData.creationtime !== null",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents?where_typeid=outputqueueobject&fields=servicecallflag,applicationlockid,archiveexpiretime,jobdescription,nextaccesstime,processingsequencenumber,connectorname,externalid,remainingattempts,storagecomponenttypeid,processingstate,archivetransfer,processingattemptid,referencecount,trackerid,sizeinbytes,tenantid,typeid,delivercompressed,id,applicationid,contentflags,queueid,complextypeid,expiringtime,parentattemptid,priority,sequencenumber,applicationdomainid,revision,parentjobid,parentcomplextypeid,originaltrackerid,creationtime&guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Service Request Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has service request as typeid\"] = responseBody.has(\"servicerequest\");",
									"tests[\"Body has service request queue as complex type\"] = responseBody.has(\"defaultservicerequestqueue\");",
									"tests[\"Complex type id is  not null \"] = jsonData.complextypeid !== null",
									"tests[\"Tracker Id not null\"] = jsonData.trackerid !== null",
									"tests[\"Creation time not null \"] = jsonData.creationtime !== null",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents?where_typeid=servicerequest&fields=servicecallflag,applicationlockid,nextaccesstime,processingsequencenumber,connectorname,externalid,remainingattempts,processingstate,processingattemptid,referencecount,trackerid,sizeinbytes,tenantid,typeid,id,applicationid,contentflags,queueid,complextypeid,expiringtime,parentattemptid,priority,sequencenumber,applicationdomainid,revision,parentjobid,parentcomplextypeid,originaltrackerid,creationtime&guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": " Job Scaling Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Body contains status\"] = jsonData.status === \"success\";",
									"tests[\"Body has job part as typeid\"] = responseBody.has(\"jobpart\");",
									"tests[\"Body has jobscalingqueue\"] = responseBody.has(\"jobscalingqueue\");",
									"tests[\"Complex type id is  not null \"] = jsonData.complextypeid !== null",
									"tests[\"Tracker Id not null\"] = jsonData.trackerid !== null",
									"tests[\"Creation time not null \"] = jsonData.creationtime !== null",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/documents?where_typeid=jobscalingqueue&fields=servicecallflag,applicationlockid,nextaccesstime,processingsequencenumber,connectorname,externalid,remainingattempts,processingstate,processingattemptid,referencecount,trackerid,sizeinbytes,tenantid,typeid,id,applicationid,contentflags,queueid,complextypeid,expiringtime,parentattemptid,priority,sequencenumber,applicationdomainid,revision,parentjobid,parentcomplextypeid,originaltrackerid,creationtime&guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources",
			"description": "",
			"item": [
				{
					"name": "getOTDSTicket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Ticket is not empty\"] = jsonData.ticket !== \"\";",
									"postman.setEnvironmentVariable(\"OTDSTicket\", jsonData.ticket);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{OTDSTICKETURL}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
						},
						"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
					},
					"response": []
				},
				{
					"name": "getSGW_FROM_MGW",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"SGW_HOST\", jsonData.data[0].url);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{MGWHOST}}:{{MGWPORT}}/management/rest/v1/servicegateways?where_tenant={{TENANTNAME}}&where_applicationdomain={{DOMAINNAME}}&where_primary_access_node=true",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to recieve an SGW from MGW.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>MGW_URL - host address including https, but not the port.</li>\r\n<li>MGW_PORT - the port.</li>\r\n</ul>\r\n\r\n<h6>Query paramete(s)</h6>\r\n<ul>\r\n<li>TENANT_NAME - the tenant name e.g. \"strs\"</li>\r\n<li>DOMAIN - the domain name \"test\"</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{SGW_HOST}} is set with the host value from <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Example response:\r\n<code>\r\n{\r\n  \"data\": [\r\n    {\r\n      \"host\": \"WIN-N35EVTP4FCK\",\r\n      \"name\": \"demoSGW\",\r\n      \"path\": \"\",\r\n      \"port\": \"2719\",\r\n      \"secure\": \"false\",\r\n      \"url\": \"http://WIN-N35EVTP4FCK:2719\"\r\n    }\r\n  ],\r\n  \"status\": \"success\"\r\n}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "createResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Resource created test\"] = jsonData.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"Revision is 1\"] = jsonData.data.revision === \"1\"",
									"tests[\"Version is 1\"] = jsonData.data.version === \"1\"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.logicid\", jsonData.data.logicid);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jobid = postman.getEnvironmentVariable(\"JOBID\") + 1;",
									"var testid = postman.getEnvironmentVariable(\"TESTID\");",
									"var origResourceName = jobid + '_' + testid + '_TestResource'; ",
									"",
									"postman.setEnvironmentVariable(\"Resource_Name\", origResourceName);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");",
									"postman.setEnvironmentVariable(\"GUID_Format\", false);"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources?name={{Resource_Name}}&type={{Resource_Type}}&lock={{Locked}}&guid_format={{GUID_Format}}",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to create a resource.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\nNote1: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</br>\r\nNote2: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Query parametes</h6>\r\n<ul>\r\n<li>Resource_Name - the name of the resoruce including the file extension</li>\r\n<li>Resource_Type - the resource type</li>\r\n<li>Locked - if a lock sohuld be applied true|false</li>\r\n<li>GUID_Format - true to list guides for reosurce attributes, false for names</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart - Request Body</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html, availabe as variable {{Resource_ContentType}}</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<code>\r\n{\r\n  \"status\": \"success\",\r\n  \"data\": {\r\n    \"sdpermissions\": [\r\n      \"read\",\r\n      \"write\",\r\n      \"execute\",\r\n      \"delete\",\r\n      \"write_owner\",\r\n      \"write_acl\"\r\n    ],\r\n    \"externalid\": \"\",\r\n    \"description\": \"\",\r\n    \"iscreatedbysystem\": \"0\",\r\n    \"referencecount\": \"0\",\r\n    \"versionmessage\": \"\",\r\n    \"securitydescriptor\": \"{\\\"acls\\\":[{\\\"grant\\\":[\\\"full_control\\\"],\\\"id\\\":\\\"strstenantadmins@strs.role\\\",\\\"type\\\":\\\"user\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"write\\\",\\\"execute\\\",\\\"delete\\\"],\\\"id\\\":\\\"strstenantusers@strs.role\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"execute\\\"],\\\"id\\\":\\\"strsondemandusers@strs.role\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"execute\\\"],\\\"id\\\":\\\"strsreviewers@strs.role\\\"}],\\\"owner\\\":\\\"strstenantadmins@strs.role\\\"}\",\r\n    \"sizeinbytes\": \"104\",\r\n    \"tenantid\": \"1BF7A5E6-A7B3-7C49-8069-EEAD5ABC556A\",\r\n    \"createdbyprincipal\": \"strsadmin@t1partition\",\r\n    \"typeid\": \"textfragment\",\r\n    \"solutionid\": \"\",\r\n    \"id\": \"Y3hyOi8_aWQ9ZTMwYzI2ZTAtNDI3Ny1jNDRkLTk0NGEtN2U3Mzg0NjE5NzE2O3Y9MTt0PWNkMmMzYmU4LTIzNWYtMDRmOS0zNWMzLTlkNjc1OTU5MTVkZQ==\",\r\n    \"state\": \"\",\r\n    \"locked\": \"0\",\r\n    \"contentflags\": \"0\",\r\n    \"logicid\": \"E30C26E0-4277-C44D-944A-7E7384619716\",\r\n    \"complextypeid\": \"defaultcasresource\",\r\n    \"expiringtime\": \"\",\r\n    \"lastupdatetime\": \"2016-02-11T11:16:17.710\",\r\n    \"sdowner\": \"strstenantadmins@strs.role\",\r\n    \"version\": \"1\",\r\n    \"revision\": \"1\",\r\n    \"lockedby\": \"\",\r\n    \"latestversionid\": \"Y3hyOi8_aWQ9ZTMwYzI2ZTAtNDI3Ny1jNDRkLTk0NGEtN2U3Mzg0NjE5NzE2O3Y9LTE7dD1jZDJjM2JlOC0yMzVmLTA0ZjktMzVjMy05ZDY3NTk1OTE1ZGU=\",\r\n    \"modifiedbyprincipal\": \"strsadmin@t1partition\",\r\n    \"name\": \"test\",\r\n    \"creationtime\": \"2016-02-11T11:16:17.710\"\r\n  }\r\n}\r\n</code>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "getResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains status\"] = responseBody.has(\"success\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with wrong CAS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as Wrong Resource id\"] = responseBody.has(\"Wrong format of Resource id\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/aawwwa?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with No CAS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as no CAS id\"] = responseBody.has(\"Required type information is not present\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with wrong Revision ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as Wrong Resource id\"] = responseBody.has(\"resource accessed with incorrect revision\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision=5",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResourceContentCheckDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"fail\";",
									"tests[\"Message has 'Resource not found'\"] = jsonData.message.has(\"Resource not found with id\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}/content?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResourceContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains UPDATED\"] = responseBody.has(\"UPDATED\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}/content?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "updateResourceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is correct\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is raised\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")) + 1; ",
									"tests[\"revision is same\"] = jsonData.data.revision === postman.getEnvironmentVariable(\"resource.revision\");",
									"",
									"console.log(jsonData.data.version);",
									"console.log(Number(postman.getEnvironmentVariable(\"resource.version\")) + 1);",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResource');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResource\");",
									"//postman.setEnvironmentVariable(\"Resource_Name\", \"updated_\" + postman.getEnvironmentVariable(\"Resource_Name\"));",
									"var updatedResourceName = postman.getEnvironmentVariable(\"Resource_Name\") + '_updated';",
									"postman.setEnvironmentVariable(\"resource.updatename\", updatedResourceName);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?name={{resource.updatename}}&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ContentType",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "updateResourceDesc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is correct\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is same\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")); ",
									"tests[\"revision is raised\"] = Number(jsonData.data.revision) === Number(postman.getEnvironmentVariable(\"resource.revision\")) + 1; ",
									"",
									"console.log(jsonData.data.version);",
									"console.log(Number(postman.getEnvironmentVariable(\"resource.version\")) + 1);",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResource');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResourceDesc\");",
									"//postman.setEnvironmentVariable(\"Resource_Name\", \"updated_\" + postman.getEnvironmentVariable(\"Resource_Name\"));",
									"var updatedResourceDesc = 'Desc updated';",
									"postman.setEnvironmentVariable(\"resource.updatedesc\", updatedResourceDesc);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?description={{resource.updatedesc}}&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ContentType",
									"value": "text/plain",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "deleteResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"CAS_REVISION\", 1);"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision={{revision_id}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": "<strong>Method to delete a resource from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parametes</h6>\r\n<ul>\r\n<li>CAS_ID - Resource logical ID</li>\r\n</ul>\r\n\r\n<h6>Query parametes</h6>\r\n<ul>\r\n<li>where_revision - Resource revision or -1 for force delete</li>\r\n</ul>\r\n\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>A json array listing all resources meeting the filter type(s)</p>\r\n<p>Example response:\r\n<code>\r\n{\"status\":\"success\",\"data\":true}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "updateResourceContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is last updated name\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is raised\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")) + 1; ",
									"tests[\"revision is 1\"] = Number(jsonData.data.revision) === 1;",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResourceContent');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResourceContent\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "text/plain",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources copy",
			"description": "",
			"item": [
				{
					"name": "getOTDSTicket",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Ticket is not empty\"] = jsonData.ticket !== \"\";",
									"postman.setEnvironmentVariable(\"OTDSTicket\", jsonData.ticket);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{OTDSTICKETURL}}",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
						},
						"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
					},
					"response": []
				},
				{
					"name": "getSGW_FROM_MGW",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"SGW_HOST\", jsonData.data[0].url);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "https://{{MGWHOST}}:{{MGWPORT}}/management/rest/v1/servicegateways?where_tenant={{TENANTNAME}}&where_applicationdomain={{DOMAINNAME}}&where_primary_access_node=true",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to recieve an SGW from MGW.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>MGW_URL - host address including https, but not the port.</li>\r\n<li>MGW_PORT - the port.</li>\r\n</ul>\r\n\r\n<h6>Query paramete(s)</h6>\r\n<ul>\r\n<li>TENANT_NAME - the tenant name e.g. \"strs\"</li>\r\n<li>DOMAIN - the domain name \"test\"</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{SGW_HOST}} is set with the host value from <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Example response:\r\n<code>\r\n{\r\n  \"data\": [\r\n    {\r\n      \"host\": \"WIN-N35EVTP4FCK\",\r\n      \"name\": \"demoSGW\",\r\n      \"path\": \"\",\r\n      \"port\": \"2719\",\r\n      \"secure\": \"false\",\r\n      \"url\": \"http://WIN-N35EVTP4FCK:2719\"\r\n    }\r\n  ],\r\n  \"status\": \"success\"\r\n}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "createResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Resource created test\"] = jsonData.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"Revision is 1\"] = jsonData.data.revision === \"1\"",
									"tests[\"Version is 1\"] = jsonData.data.version === \"1\"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.logicid\", jsonData.data.logicid);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jobid = postman.getEnvironmentVariable(\"JOBID\") + 1;",
									"var testid = postman.getEnvironmentVariable(\"TESTID\");",
									"var origResourceName = jobid + '_' + testid + '_TestResource'; ",
									"",
									"postman.setEnvironmentVariable(\"Resource_Name\", origResourceName);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");",
									"postman.setEnvironmentVariable(\"GUID_Format\", false);"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources?name={{Resource_Name}}&type={{Resource_Type}}&lock={{Locked}}&guid_format={{GUID_Format}}",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "{{Resource_ContentType}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to create a resource.</strong>\r\n\r\n<p>Note: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\nNote1: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</br>\r\nNote2: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Query parametes</h6>\r\n<ul>\r\n<li>Resource_Name - the name of the resoruce including the file extension</li>\r\n<li>Resource_Type - the resource type</li>\r\n<li>Locked - if a lock sohuld be applied true|false</li>\r\n<li>GUID_Format - true to list guides for reosurce attributes, false for names</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart - Request Body</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html, availabe as variable {{Resource_ContentType}}</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<code>\r\n{\r\n  \"status\": \"success\",\r\n  \"data\": {\r\n    \"sdpermissions\": [\r\n      \"read\",\r\n      \"write\",\r\n      \"execute\",\r\n      \"delete\",\r\n      \"write_owner\",\r\n      \"write_acl\"\r\n    ],\r\n    \"externalid\": \"\",\r\n    \"description\": \"\",\r\n    \"iscreatedbysystem\": \"0\",\r\n    \"referencecount\": \"0\",\r\n    \"versionmessage\": \"\",\r\n    \"securitydescriptor\": \"{\\\"acls\\\":[{\\\"grant\\\":[\\\"full_control\\\"],\\\"id\\\":\\\"strstenantadmins@strs.role\\\",\\\"type\\\":\\\"user\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"write\\\",\\\"execute\\\",\\\"delete\\\"],\\\"id\\\":\\\"strstenantusers@strs.role\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"execute\\\"],\\\"id\\\":\\\"strsondemandusers@strs.role\\\"},{\\\"grant\\\":[\\\"read\\\",\\\"execute\\\"],\\\"id\\\":\\\"strsreviewers@strs.role\\\"}],\\\"owner\\\":\\\"strstenantadmins@strs.role\\\"}\",\r\n    \"sizeinbytes\": \"104\",\r\n    \"tenantid\": \"1BF7A5E6-A7B3-7C49-8069-EEAD5ABC556A\",\r\n    \"createdbyprincipal\": \"strsadmin@t1partition\",\r\n    \"typeid\": \"textfragment\",\r\n    \"solutionid\": \"\",\r\n    \"id\": \"Y3hyOi8_aWQ9ZTMwYzI2ZTAtNDI3Ny1jNDRkLTk0NGEtN2U3Mzg0NjE5NzE2O3Y9MTt0PWNkMmMzYmU4LTIzNWYtMDRmOS0zNWMzLTlkNjc1OTU5MTVkZQ==\",\r\n    \"state\": \"\",\r\n    \"locked\": \"0\",\r\n    \"contentflags\": \"0\",\r\n    \"logicid\": \"E30C26E0-4277-C44D-944A-7E7384619716\",\r\n    \"complextypeid\": \"defaultcasresource\",\r\n    \"expiringtime\": \"\",\r\n    \"lastupdatetime\": \"2016-02-11T11:16:17.710\",\r\n    \"sdowner\": \"strstenantadmins@strs.role\",\r\n    \"version\": \"1\",\r\n    \"revision\": \"1\",\r\n    \"lockedby\": \"\",\r\n    \"latestversionid\": \"Y3hyOi8_aWQ9ZTMwYzI2ZTAtNDI3Ny1jNDRkLTk0NGEtN2U3Mzg0NjE5NzE2O3Y9LTE7dD1jZDJjM2JlOC0yMzVmLTA0ZjktMzVjMy05ZDY3NTk1OTE1ZGU=\",\r\n    \"modifiedbyprincipal\": \"strsadmin@t1partition\",\r\n    \"name\": \"test\",\r\n    \"creationtime\": \"2016-02-11T11:16:17.710\"\r\n  }\r\n}\r\n</code>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "getResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains status\"] = responseBody.has(\"success\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with wrong CAS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as Wrong Resource id\"] = responseBody.has(\"Wrong format of Resource id\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/aawwwa?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with No CAS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as no CAS id\"] = responseBody.has(\"Required type information is not present\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResource with wrong Revision ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 400;",
									"tests[\"Body contains status\"] = responseBody.has(\"fail\");",
									"tests[\"Body contains message as Wrong Resource id\"] = responseBody.has(\"resource accessed with incorrect revision\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision=5",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResourceContentCheckDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"fail\";",
									"tests[\"Message has 'Resource not found'\"] = jsonData.message.has(\"Resource not found with id\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}/content?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "getResourceContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"Body contains UPDATED\"] = responseBody.has(\"UPDATED\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									"console.log(\"In getResourceContent\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}/content?where_revision={{Revision}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "updateResourceName",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is correct\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is raised\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")) + 1; ",
									"tests[\"revision is same\"] = jsonData.data.revision === postman.getEnvironmentVariable(\"resource.revision\");",
									"",
									"console.log(jsonData.data.version);",
									"console.log(Number(postman.getEnvironmentVariable(\"resource.version\")) + 1);",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResource');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResource\");",
									"//postman.setEnvironmentVariable(\"Resource_Name\", \"updated_\" + postman.getEnvironmentVariable(\"Resource_Name\"));",
									"var updatedResourceName = postman.getEnvironmentVariable(\"Resource_Name\") + '_updated';",
									"postman.setEnvironmentVariable(\"resource.updatename\", updatedResourceName);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?name={{resource.updatename}}&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ContentType",
									"value": "",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "updateResourceDesc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is correct\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is same\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")); ",
									"tests[\"revision is raised\"] = Number(jsonData.data.revision) === Number(postman.getEnvironmentVariable(\"resource.revision\")) + 1; ",
									"",
									"console.log(jsonData.data.version);",
									"console.log(Number(postman.getEnvironmentVariable(\"resource.version\")) + 1);",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResource');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResourceDesc\");",
									"//postman.setEnvironmentVariable(\"Resource_Name\", \"updated_\" + postman.getEnvironmentVariable(\"Resource_Name\"));",
									"var updatedResourceDesc = 'Desc updated';",
									"postman.setEnvironmentVariable(\"resource.updatedesc\", updatedResourceDesc);",
									"postman.setEnvironmentVariable(\"Resource_Type\", \"Textfragment\");",
									"postman.setEnvironmentVariable(\"Locked\", false);",
									"postman.setEnvironmentVariable(\"Resource_ContentType\", \"text/html\");"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?description={{resource.updatedesc}}&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ContentType",
									"value": "text/plain",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				},
				{
					"name": "deleteResource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"CAS_REVISION\", 1);"
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?where_revision={{revision_id}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": "<strong>Method to delete a resource from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parametes</h6>\r\n<ul>\r\n<li>CAS_ID - Resource logical ID</li>\r\n</ul>\r\n\r\n<h6>Query parametes</h6>\r\n<ul>\r\n<li>where_revision - Resource revision or -1 for force delete</li>\r\n</ul>\r\n\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>A json array listing all resources meeting the filter type(s)</p>\r\n<p>Example response:\r\n<code>\r\n{\"status\":\"success\",\"data\":true}\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "updateResourceContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"name is last updated name\"] = jsonData.data.name === postman.getEnvironmentVariable(\"resource.updatename\");",
									"tests[\"logicid is same as orig\"] = jsonData.data.logicid === postman.getEnvironmentVariable(\"resource.logicid\");",
									"tests[\"version is raised\"] = Number(jsonData.data.version) === Number(postman.getEnvironmentVariable(\"resource.version\")) + 1; ",
									"tests[\"revision is 1\"] = Number(jsonData.data.revision) === 1;",
									"",
									"postman.setEnvironmentVariable(\"CAS_ID\", jsonData.data.id);",
									"postman.setEnvironmentVariable(\"resource.version\", jsonData.data.version);",
									"postman.setEnvironmentVariable(\"resource.revision\", jsonData.data.revision);",
									"",
									"console.log('End of updateResourceContent');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In updateResourceContent\");",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/resources/{{CAS_ID}}?&lock=false&where_revision=-1&guid_format=false&method=PUT",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"warning": "",
									"src": "updatedTextResource.txt"
								},
								{
									"key": "Content-Type",
									"value": "text/plain",
									"type": "text",
									"enabled": true,
									"warning": ""
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"enabled": false,
									"warning": ""
								}
							]
						},
						"description": "<strong>Method to update the content of a file resource.</strong>\r\n\r\nNote: add \"method=PUT\" as a parameter to the URL\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Multipart</h6>\r\nTo create the multipart/form-data:<br/>\r\nNote: Do not set Content-Type as a header parameter, Postman does if for you. <br/>\r\n<ol>\r\n<li>Select Body and pick form-data</li>\r\n<li>Add a parameter \"file\" and change the type (dropdown box) from Text to File</li>\r\n<li>Select your file via the file picker</li>\r\n<li>Add \"Content-Type\" parameter and type corrent mime type for your file e.g. text/html</li>\r\n</ol>\r\n</p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Simulations",
			"description": "",
			"item": [
				{
					"name": "Create simulations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'data\"] = responseBody.has(\"data\");",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/simulations",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n               \"structure\" : {\r\n                              \"samplefile\" : {},\r\n                              \"name\" : \"simtest\"\r\n               },\r\n               \"name\" : \"simtest\",\r\n               \"sampleFileId\" : \"Y3hyOi8_aWQ9ZDY1NjM3M2UtYzNkYi1iZTRkLWFhMGMtNWY2ZGE2ODEwNDI3O3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh\"\r\n}\r\n"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "simulations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'data\"] = responseBody.has(\"data\");",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/simulations",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "simulations ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'data\"] = responseBody.has(\"data\");",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/simulations/Y3hyOi8_aWQ9ZmFmYTllMjUtM2E1My1hMjQ3LTk0ZjMtMzA2YTUxMDY5MjE0O3Y9MTt0PTk3MzhkNzM4LTljOWUtNmZmMS05MWNiLTMzZGRiOTAwMTFhYw==?where_revision=-1",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "simulations with wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"fail\";",
									"tests[\"Message has simulation id\"] = responseBody.has(\"Wrong format of Resource id\");",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/simulations/dbdjkfbkdrgf",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Update simulations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'data\"] = responseBody.has(\"data\");",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/simulations/Y3hyOi8_aWQ9ZjA3NGU1MzItNDNiMS05OTRhLWIyYzAtYWVhMTQ4MWIwYTE0O3Y9MTt0PTk3MzhkNzM4LTljOWUtNmZmMS05MWNiLTMzZGRiOTAwMTFhYw==",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n               \"structure\" : {\r\n                              \"samplefile\" : {},\r\n                              \"name\" : \"simtest\"\r\n               },\r\n               \"name\" : \"simtest\",\r\n               \"sampleFileId\" : \"Y3hyOi8_aWQ9ZDY1NjM3M2UtYzNkYi1iZTRkLWFhMGMtNWY2ZGE2ODEwNDI3O3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh\"\r\n}\r\n"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Templates",
			"description": "",
			"item": [
				{
					"name": "Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var resp = JSON.parse(responseBody);\r",
									"\r",
									"// Fetch the template id. The id is the key in the data.content object, so we need to loop these to get the id value. \r",
									"for ( var o in resp.data.content ) {\r",
									"  console.log(\"Setting template id to: \" + o );\r",
									"  postman.setEnvironmentVariable(\"templateid\", o);\r",
									"  break;\r",
									"}\r",
									"\r",
									"//Testing\r",
									"tests[\"Status of the message as success\"] = resp.status === \"success\";\r",
									"tests[\"Template id is not empty\"] = postman.getEnvironmentVariable(\"templateid\") !== \"\";\r",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/templates",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Templates ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var templates = JSON.parse(responseBody);",
									"",
									"tests[\"Resource created test\"] = templates.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = templates.status === \"success\";",
									"tests[\"Revision id is not empty\"] = templates.revision !== \"\";",
									"tests[\"Body has template\"] = responseBody.has(\"template\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/templates?where_id={{templateid}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Templates with wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var templates = JSON.parse(responseBody);",
									"",
									"tests[\"Resource created test\"] = templates.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = templates.status === \"fail\";",
									"tests[\"wrong template id\"] = templates.revision !== \"Specified ID  doesn't confirm to format\";",
									"tests[\"Body has message bad request\"] = responseBody.has(\"Bad request, please see 'data' for more information.\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/templates?where_id=Y3hyOi8_aZjU5NGEtMDBkNC1lYzRhLTlhY2EtMTg1N2Y5ZWVjNThiO3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Themes",
			"description": "",
			"item": [
				{
					"name": "Create Themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'type'\"] = responseBody.has(\"type\");",
									"tests[\"Message has 'working copy\"] = responseBody.has(\"workingCopy\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n               \"structure\" : {\r\n                              \"template\" : {\r\n                                             \"id\" : \"Y3hyOi8_aWQ9MTVmYzZkMTItOTJlZS00Y2VjLTg0NjgtODhiMWE0MTYzZTBiO3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh\"\r\n                              },\r\n                              \"name\" : \"ThemeTest\"\r\n               },\r\n               \"name\" : \"ThemeTest\",\r\n               \"messageComplexType\" : \"425ABA47-7919-D2FB-B73F-0E68BD0F3BCB\"\r\n}\r\n"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"themeid\", jsonData.data[0].id);",
									"tests[\"Request is fail\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'type'\"] = responseBody.has(\"type\");",
									"tests[\"Message has 'working copy\"] = responseBody.has(\"workingCopy\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "themes id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'sections'\"] = responseBody.has(\"sections\");",
									"tests[\"Message has 'simulations'\"] = responseBody.has(\"simulations\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/{{themeid}}",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "themes with wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"fail\";",
									"tests[\"Message has 'Wrong ID'\"] = responseBody.has(\"Wrong format of Resource id\");",
									"tests[\"Message has 'Bad Request'\"] = responseBody.has(\"Bad request, please see 'data' for more information.\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/abcd1234",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "themes id properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'sdpermissions'\"] = responseBody.has(\"sdpermissions\");",
									"tests[\"Message has 'simulations'\"] = responseBody.has(\"simulations\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/{{themeid}}/properties",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Update themes id ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'sections'\"] = responseBody.has(\"sections\");",
									"tests[\"Message has 'simulations'\"] = responseBody.has(\"simulations\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/{{themeid}}",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"structure\" : {\r\n            \"name\" : \"Updated theme name\",\r\n            \"template\" : {\r\n                \"id\" : \"Y3hyOi8_aWQ9MmQ0OTAxMDQtOTQyMi00ZTI5LTkyY2EtNmViODVjZWEwZTAxO3Q9M2E0MmE5MGMtMGJjNC0wNzJhLTI1MjItZTlhYjI5OTNkZTdh\"\r\n            }\r\n        }\r\n    }"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "themes id properties preview document",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'sdpermissions'\"] = responseBody.has(\"sdpermissions\");",
									"tests[\"Message has 'simulations'\"] = responseBody.has(\"simulations\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/{{themeid}}/properties",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Delete theme",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/themes/{{themeid}}?where_revision=-3",
						"method": "DELETE",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Trackers",
			"description": "",
			"item": [
				{
					"name": "trackers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is success\"] = jsonData.status === \"success\";",
									"tests[\"Message has 'data\"] = responseBody.has(\"data\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/trackers?guid_format=false",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Views",
			"description": "",
			"item": [
				{
					"name": "Create views  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Request is fail\"] = jsonData.status === \"fail\";",
									"tests[\"Message has 'Resource not found'\"] = jsonData.message.has(\"Resource not found with id\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/views",
						"method": "POST",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    }\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "views",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var views = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"viewid\", views.data[0].id);",
									"tests[\"Resource created test\"] = views.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = views.status.has(\"success\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/views",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "views ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var views = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"viewid\", views.data.id);",
									"tests[\"Resource created test\"] = views.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = views.status.has(\"success\");",
									"tests[\"Revision is not null\"] = views.revision !== \"\";"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/views/{{viewid}}?where_revision=1",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "views with wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var views = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"viewid\", views.data.id);",
									"tests[\"Resource created test\"] = views.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = views.status.has(\"success\");",
									"tests[\"Revision is not null\"] = views.revision !== \"\";"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/views/{{viewid}}?where_revision=1",
						"method": "GET",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"value": "",
									"type": "file",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": null,
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				},
				{
					"name": "Update views",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var views = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"viewid\", views.data.id);",
									"tests[\"Resource created test\"] = views.data.id !== \"\";",
									"tests[\"Body has id\"] = responseBody.has(\"id\");",
									"tests[\"status of the message as success\"] = views.status.has(\"success\");",
									"tests[\"Revision is not null\"] = views.revision !== \"\";"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"In getResourceContentCheckDeleted\");",
									"postman.setEnvironmentVariable(\"Revision\", -1);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{SGW_HOST}}/views/{{viewid}}",
						"method": "PUT",
						"header": [
							{
								"key": "OTDSTicket",
								"value": "{{OTDSTicket}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"ssdsd33\", \"defaultView\": false}"
						},
						"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var templates = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"templateid\", templates.data.id);",
							"tests[\"Resource created test\"] = templates.data.id !== \"\";",
							"tests[\"Body has id\"] = responseBody.has(\"id\");",
							"tests[\"status of the message as success\"] = templates.status === \"success\";",
							"tests[\"Revision id is not empty\"] = templates.revision !== \"\";",
							"tests[\"Body has template\"] = responseBody.has(\"templateIDList\");",
							"tests[\"Body has applicationid\"] = responseBody.has(\"applicationid\");",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"In getResourceContentCheckDeleted\");",
							"postman.setEnvironmentVariable(\"Revision\", -1);",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGW_HOST}}/services",
				"method": "GET",
				"header": [
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"value": "",
							"type": "file",
							"enabled": true
						},
						{
							"key": "Content-Type",
							"value": null,
							"type": "text",
							"enabled": true
						}
					]
				},
				"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
			},
			"response": []
		},
		{
			"name": "metamodels",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var documents = JSON.parse(responseBody);",
							"",
							"",
							"tests[\"Body has data\"] = responseBody.has(\"data\");",
							"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
							"tests[\"metamodel  has data\"] = responseBody.has(\"system\");",
							"tests[\"body has custom\"] = responseBody.has(\"custom\");",
							"tests[\"Revision id is not empty\"] = documents.revision !== \"\";",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"In getResourceContentCheckDeleted\");",
							"postman.setEnvironmentVariable(\"Revision\", -1);",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGW_HOST}}/metamodels",
				"method": "GET",
				"header": [
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
				},
				"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
			},
			"response": []
		},
		{
			"name": "authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGWHOST}}:{{SGWPORT}}/authenticate",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
				},
				"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
			},
			"response": []
		},
		{
			"name": "authenticate current",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGWHOST}}:{{SGWPORT}}/authenticate/current",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					},
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"user_name\" : \"{{TAUSER}}\",\r\n\"password\" : \"{{TAPASSWORD}}\"}"
				},
				"description": "<strong>Method to recieve an OTDSTicket from an OTDS server directly.</strong>\r\n\r\nNote: If the server uses an selfsigned certificate follow this article to add the certicifate as trusted in Chrome.\r\n<a href=\"http://blog.getpostman.com/2014/01/28/using-self-signed-certificates-with-postman/\">using-self-signed-certificates-with-postman</a>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>OTDS_URL - host address including https, but not the port.</li>\r\n<li>OTDS_PORT - the port.</li>\r\n</ul>\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>OTDS_TENANT - the tenant e.g. \"otdstenane/t1\"</li>\r\n</ul>\r\n<h6>Request header(s)</h6>\r\n<p>Content-type: application/json</p>\r\n<h6>Request body</h6>\r\n<ul>\r\n<li>User - Username</li>\r\n<li>Password - password for the user</li>\r\n</ul>\r\nExample\r\n<code>\r\n{ \"user_name\" : \"user\", \"password\" : \"password\" }\r\n</code>\r\n</p>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>An environment variable {{OTDSTicket}} is set with the ticket value from <strong>getOTDSTicket</strong> call</p>"
			},
			"response": []
		},
		{
			"name": "permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var documents = JSON.parse(responseBody);",
							"",
							"",
							"tests[\"Body has data\"] = responseBody.has(\"data\");",
							"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
							"tests[\"status of the message as test\"] = responseBody.has(\"data\");",
							"tests[\"permission has parentID\"] = responseBody.has(\"parentId\");",
							"tests[\"permission has resourceId\"] = responseBody.has(\"resourceId\");",
							"tests[\"permission has operationId\"] = responseBody.has(\"operationId\");",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"In getResourceContentCheckDeleted\");",
							"postman.setEnvironmentVariable(\"Revision\", -1);",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGW_HOST}}/security/permissions",
				"method": "GET",
				"header": [
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
				},
				"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
			},
			"response": []
		},
		{
			"name": "systeminfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var documents = JSON.parse(responseBody);",
							"",
							"",
							"tests[\"Body has data\"] = responseBody.has(\"data\");",
							"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
							"tests[\"Body has appversion\"] = responseBody.has(\"appversion\");",
							"tests[\"Body has buildnumber\"] = responseBody.has(\"buildnumber\");",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"In getResourceContentCheckDeleted\");",
							"postman.setEnvironmentVariable(\"Revision\", -1);",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGW_HOST}}/systeminfo",
				"method": "GET",
				"header": [
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
				},
				"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
			},
			"response": []
		},
		{
			"name": "principals",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var documents = JSON.parse(responseBody);",
							"",
							"",
							"tests[\"Body has data\"] = responseBody.has(\"data\");",
							"tests[\"status of the message as success\"] = documents.status.has(\"success\");",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"In getResourceContentCheckDeleted\");",
							"postman.setEnvironmentVariable(\"Revision\", -1);",
							""
						]
					}
				}
			],
			"request": {
				"url": "{{SGW_HOST}}/principals",
				"method": "GET",
				"header": [
					{
						"key": "OTDSTicket",
						"value": "{{OTDSTicket}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{            \r\n            \"name\": \"TestView\",\r\n            \"description\": \"view for testing\",\r\n            \"workspace\" : \"Resources\",\r\n            \"defaultView\": true,\r\n            \"systemView\": true,\r\n            \"owner\": \"Michael\",\r\n            \"content\": {\r\n                \"columns\": [\r\n          {\r\n                        \"columnId\": \"6B84E18B-F03F-350C-E040-007F0200026D\",\r\n                        \"name\": \"type\",\r\n                        \"type\": \"string\",\r\n                        \"visible\": \"true\"\r\n                    },\r\n                ],\r\n                \"filters\": [\r\n                    {\r\n                        \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                        \"values\": [\r\n                            \"1\"\r\n                        ],\r\n                        \"operator\": \"=\",\r\n                        \"editable\": \"true\"\r\n                    }\r\n                ],\r\n                \"sort\": {\r\n                    \"columnId\": \"8D8F7359-2898-41B0-983C-B94630D6B5DB\",\r\n                    \"method\": \"asc\"\r\n                },\r\n                \"pageSize\": \"50\"\r\n            }\r\n}"
				},
				"description": "<strong>Method to get resource content from CAS.</strong>\r\n\r\n<p>Note1: the OTDSTicket header is using a variabel set by the <strong>getOTDSTicket</strong> call</p>\r\n<p>Note2: the SGW_URL query parameter is using a variabel set by the <strong>getSGW_FROM_MGW</strong> call</p>\r\n<p>Note3: Note: The SGW should be used from the MGW call, but the machine used for creating these tests have got updated DNS so the host names aren't accessible for the machine.</p>\r\n<p>\r\n\r\n\r\n<p>\r\n<h6>Postman parameter(s) for environment</h6>\r\n<ul>\r\n<li>SGW_HOST - host address including http and the port.</li>\r\n</ul>\r\n\r\n<h6>Path parameter(s)</h6>\r\n<ul>\r\n<li>CAS_ID - CAS id for one resource</li>\r\n</ul>\r\n\r\n<h6>Query parameter(s)</h6>\r\n<ul>\r\n<li>Revision - revision, use -1 to ignore</li>\r\n</ul>\r\n\r\n<p>\r\n<h6>Response</h6>\r\n<p>Binary content for the CAS resource</p>\r\n<p>Example response:\r\n<code>\r\nSome text from a plain text file\r\n</code></p>"
			},
			"response": []
		}
	]
}